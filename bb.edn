{:deps {io.github.babashka/sci.nrepl
        ;; {:local/root "../sci.nrepl"}
        {:git/sha "318e39fc356652d749180f3a3efba5eb4b99d304"}}

 :tasks
 {:requires ([babashka.fs :as fs]
             [cheshire.core :as json]
             [babashka.process :as p :refer [process]])

  clean {:doc "Start from clean slate."
         :task (do (run! fs/delete (fs/list-dir (fs/file "resources" "public" "js") "**.*"))
                   (fs/delete-tree ".cpcache")
                   (fs/delete-tree ".shadow-cljs"))}

  shadow:watch {:doc "Development build. Starts webserver and watches for changes."
                :task (clojure "-M:dev -m shadow.cljs.devtools.cli watch main")}

  browser-nrepl {:doc "Start browser nREPL"
                 :requires ([sci.nrepl.browser-proxy :as bp])
                 :task (do (bp/start-browser-nrepl! {:port 1339})
                           (bp/serve! {:port 1340})
                           (println "Started browser nREPL on port 1339")
                           (deref (promise)))}

  -dev {:depends [shadow:watch browser-nrepl]}

  dev {:doc "Development build. Starts webserver and watches for changes."
       :task (run '-dev {:parallel true})}

  prod {:doc "Builds production artifacts."
        :task (clojure {:extra-env {"SCI_ELIDE_VARS" "true"}}
                       "-M:dev -m shadow.cljs.devtools.cli release main")}

  dist {:doc "Prepare dist folder for npm package"
        :depends [prod]
        :task (do
                (fs/delete-tree "dist")
                (fs/create-dirs "dist")
                (run! (fn [f] (fs/copy f "dist"))
                      (fs/glob "resources/public/js" "*.js")))}

  bump-version {:doc "Bumps package.json and pushes new git tag"
                :task (do (shell "npm version patch")
                          (shell "git push --atomic origin main"
                                 (str "v" (:version (json/parse-string (slurp "package.json") true)))))}

  npm-publish {:doc "Updates Github pages with new release build."
               :task (do (run 'dist)
                         (run 'bump-version)
                         (shell "npm publish"))}

  gh-pages {:doc "Updates Github pages with new release build."
            :task (shell "script/release.clj")}

  replace-version {:doc "Ported from bash one-liners. Expects two versions. TODO: port to Clojure."
                   :task
                   (let [[prev next] *command-line-args*]
                     (-> (process ["bash" "-c"
                                   (format "rg %s --files-with-matches | xargs sed -i '' 's/%s/%s/g'"
                                           prev prev next)]
                                  {:inherit true})
                         p/check))}}}
